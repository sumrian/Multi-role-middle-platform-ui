// vite.config.ts
import { defineApplicationConfig } from "file:///C:/Users/30927/WebstormProjects/ruoyi-plus-vben/internal/vite-config/dist/index.mjs";
import zipPack from "file:///C:/Users/30927/WebstormProjects/ruoyi-plus-vben/node_modules/.pnpm/vite-plugin-zip-pack@1.2.4_vite@5.4.0_@types+node@20.12.7_less@4.2.0_sass@1.77.6_terser@5.33.0_/node_modules/vite-plugin-zip-pack/dist/esm/index.mjs";

// package.json
var name = "ruoyi-plus-vben";

// vite.config.ts
import { resolve } from "node:path";
var __vite_injected_original_dirname = "C:\\Users\\30927\\WebstormProjects\\ruoyi-plus-vben";
var r = (...args) => resolve(__vite_injected_original_dirname, ".", ...args);
var getZipFileName = () => {
  return `${name}_${(/* @__PURE__ */ new Date()).toLocaleString().replace(/\/|:/g, "").replace(/\s/g, "_")}`;
};
var vite_config_default = defineApplicationConfig({
  overrides: {
    optimizeDeps: {
      include: [
        "echarts/core",
        "echarts/charts",
        "echarts/components",
        "echarts/renderers",
        "qrcode",
        "@iconify/iconify",
        "ant-design-vue/es/locale/zh_CN",
        "ant-design-vue/es/locale/en_US"
      ]
    },
    server: {
      proxy: {
        "/basic-api": {
          target: "http://localhost:8089",
          changeOrigin: true,
          ws: true,
          rewrite: (path) => path.replace(new RegExp(`^/basic-api`), "")
        }
      },
      open: false,
      // 项目启动后，自动打开
      warmup: {
        clientFiles: ["./index.html", "./src/{views,components}/*"]
      }
    },
    plugins: [
      zipPack({ outDir: "out", outFileName: `${getZipFileName()}.zip`, pathPrefix: "dist" })
    ]
  }
});
export {
  vite_config_default as default,
  r
};
//# sourceMappingURL=data:application/json;base64,
